"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[6636],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>f});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function l(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?l(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},l=Object.keys(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),u=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},p=function(e){var t=u(e.components);return n.createElement(s.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},k=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,l=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),c=u(r),k=a,f=c["".concat(s,".").concat(k)]||c[k]||m[k]||l;return r?n.createElement(f,o(o({ref:t},p),{},{components:r})):n.createElement(f,o({ref:t},p))}));function f(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=r.length,o=new Array(l);o[0]=k;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[c]="string"==typeof e?e:a,o[1]=i;for(var u=2;u<l;u++)o[u]=r[u];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}k.displayName="MDXCreateElement"},50472:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>m,frontMatter:()=>l,metadata:()=>i,toc:()=>u});var n=r(87462),a=(r(67294),r(3905));const l={},o="ReportPortal 23.1 File storage options",i={unversionedId:"installation-steps/ReportPortal23.1FileStorageOptions",id:"installation-steps/ReportPortal23.1FileStorageOptions",title:"ReportPortal 23.1 File storage options",description:"In ReportPortal 23.1 we can use multiple ways to store log attachments, user pictures and plugins.",source:"@site/docs/installation-steps/ReportPortal23.1FileStorageOptions.md",sourceDirName:"installation-steps",slug:"/installation-steps/ReportPortal23.1FileStorageOptions",permalink:"/docs/installation-steps/ReportPortal23.1FileStorageOptions",draft:!1,editUrl:"https://github.com/reportportal/docs/blob/develop/docs/installation-steps/ReportPortal23.1FileStorageOptions.md",tags:[],version:"current",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"Deploy with AWS ECS Fargate",permalink:"/docs/installation-steps/DeployWithAWSECSFargate"},next:{title:"ReportPortal Configuration",permalink:"/docs/category/reportportal-configuration"}},s={},u=[{value:"AWS S3",id:"aws-s3",level:2},{value:"MinIO",id:"minio",level:2},{value:"Container&#39;s File system",id:"containers-file-system",level:2}],p={toc:u},c="wrapper";function m(e){let{components:t,...r}=e;return(0,a.kt)(c,(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"reportportal-231-file-storage-options"},"ReportPortal 23.1 File storage options"),(0,a.kt)("p",null,"In ReportPortal 23.1 we can use multiple ways to store log attachments, user pictures and plugins."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"AWS S3"),(0,a.kt)("li",{parentName:"ul"},"MinIO distributed object storage"),(0,a.kt)("li",{parentName:"ul"},"Container's File system")),(0,a.kt)("p",null,"Currently we have 2 file storage systems: ",(0,a.kt)("strong",{parentName:"p"},"multi-bucket")," and ",(0,a.kt)("strong",{parentName:"p"},"single-bucket"),"."),(0,a.kt)("p",null,"In the multi-bucket system structure of buckets looks like this:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("em",{parentName:"li"},"bucketPrefix")," + \u2018keystore\u2019 (bucket for storing integration secrets)"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("em",{parentName:"li"},"bucketPrefix")," + \u2018users\u2019 (bucket for storing user data)"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("em",{parentName:"li"},"defaultBucketName")," (bucket for storing plugins)"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("em",{parentName:"li"},"bucketPrefix + projectId")," (bucket for storing project attachments)")),(0,a.kt)("p",null,"In the single-bucket system structure of single-bucket is the following:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("em",{parentName:"li"},"singleBucketName/"),"integration-secrets/ (prefix for integration secrets)"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("em",{parentName:"li"},"singleBucketName/"),"user-data/ (prefix for user data)"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("em",{parentName:"li"},"singleBucketName/"),"plugins/ (prefix for plugins)"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("em",{parentName:"li"},"singleBucketName/"),"project-data/projectId (prefix for project attachments)")),(0,a.kt)("h2",{id:"aws-s3"},"AWS S3"),(0,a.kt)("p",null,"Amazon Simple Storage Service (Amazon S3) is an object storage service offering industry-leading scalability, data availability, security, and performance. Bucket names must be unique across all AWS accounts in all the AWS Regions within a partition. A partition is a grouping of ",(0,a.kt)("a",{parentName:"p",href:"https://docs.aws.amazon.com/general/latest/gr/s3.html"},"Regions"),"."),(0,a.kt)("p",null,"To set up AWS S3 in API, UAT & Jobs services use the following variables:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"DATASTORE_TYPE: s3"),(0,a.kt)("li",{parentName:"ul"},"DATASTORE_ACCESSKEY for AWS S3 AccessKey"),(0,a.kt)("li",{parentName:"ul"},"DATASTORE_SECRETKEY for AWS S3 SecretKey"),(0,a.kt)("li",{parentName:"ul"},"DATASTORE_REGION for AWS region")),(0,a.kt)("p",null,"To set up the ",(0,a.kt)("strong",{parentName:"p"},"multi-bucket")," system, use the following environment variables:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"DATASTORE_BUCKETPREFIX for prefix of bucket name (\u2018prj-\u2018 by default)"),(0,a.kt)("li",{parentName:"ul"},"DATASTORE_DEFAULTBUCKETNAME for name of plugins bucket (\u2018rp-bucket\u2019 by default)")),(0,a.kt)("p",null,"To set up the ",(0,a.kt)("strong",{parentName:"p"},"single-bucket")," system, use the following environment variables:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"DATASTORE_DEFAULTBUCKETNAME for single-bucket name"),(0,a.kt)("li",{parentName:"ul"},"RP_FEATURE_FLAGS: singleBucket")),(0,a.kt)("h2",{id:"minio"},"MinIO"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://min.io/"},"MinIO")," is a high-performance distributed object storage server. It stays on top of S3 or any other cloud storage and allows to have a shared FS for several API, UAT & Jobs pods in Kubernetes."),(0,a.kt)("p",null,"To set up MinIO in services, use the following variables:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"DATASTORE_TYPE: minio"),(0,a.kt)("li",{parentName:"ul"},"DATASTORE_ENDPOINT for endpoint (address)"),(0,a.kt)("li",{parentName:"ul"},"DATASTORE_ACCESSKEY for accesskey"),(0,a.kt)("li",{parentName:"ul"},"DATASTORE_SECRETKEY for secretkey")),(0,a.kt)("p",null,"To set the ",(0,a.kt)("strong",{parentName:"p"},"multi-bucket")," system, use the following environment variables:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"DATASTORE_BUCKETPREFIX for prefix of bucket name (\u2018prj-\u2018 by default)"),(0,a.kt)("li",{parentName:"ul"},"DATASTORE_DEFAULTBUCKETNAME for name of plugins bucket (\u2018rp-bucket\u2019 by default)")),(0,a.kt)("p",null,"To set the ",(0,a.kt)("strong",{parentName:"p"},"single-bucket")," system, use the following environment variables:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"DATASTORE_DEFAULTBUCKETNAME for single-bucket name"),(0,a.kt)("li",{parentName:"ul"},"RP_FEATURE_FLAGS : singleBucket")),(0,a.kt)("h2",{id:"containers-file-system"},"Container's File system"),(0,a.kt)("p",null,"The container's file system option is used when you want to store this data in a mounted folder in the service-api or/and service-uat containers."),(0,a.kt)("p",null,"To use this option, set up environment variables like this:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"DATASTORE_TYPE: filesystem"),(0,a.kt)("li",{parentName:"ul"},"DATASTORE_PATH for path in filesystem to store files.")),(0,a.kt)("p",null,"It can be done in both Docker and Kubernetes ReportPortal versions."))}m.isMDXComponent=!0}}]);