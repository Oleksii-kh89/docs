"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[4946],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>m});var n=a(67294);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){o(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,o=function(e,t){if(null==e)return{};var a,n,o={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(o[a]=e[a]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var l=n.createContext({}),u=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},c=function(e){var t=u(e.components);return n.createElement(l.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var a=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=u(a),h=o,m=p["".concat(l,".").concat(h)]||p[h]||d[h]||r;return a?n.createElement(m,i(i({ref:t},c),{},{components:a})):n.createElement(m,i({ref:t},c))}));function m(e,t){var a=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=a.length,i=new Array(r);i[0]=h;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[p]="string"==typeof e?e:o,i[1]=s;for(var u=2;u<r;u++)i[u]=a[u];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}h.displayName="MDXCreateElement"},93641:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>r,metadata:()=>s,toc:()=>u});var n=a(87462),o=(a(67294),a(3905));const r={sidebar_position:24,sidebar_label:"Table Component health check"},i="Table Component health check",s={unversionedId:"dashboards-and-widgets/TableComponentHealthCheck",id:"dashboards-and-widgets/TableComponentHealthCheck",title:"Table Component health check",description:"Shows the detailed statisctics of the application components which are indicated by the specified attributes.",source:"@site/docs/dashboards-and-widgets/TableComponentHealthCheck.mdx",sourceDirName:"dashboards-and-widgets",slug:"/dashboards-and-widgets/TableComponentHealthCheck",permalink:"/docs/dashboards-and-widgets/TableComponentHealthCheck",draft:!1,editUrl:"https://github.com/reportportal/docs/blob/develop/docs/dashboards-and-widgets/TableComponentHealthCheck.mdx",tags:[],version:"current",sidebarPosition:24,frontMatter:{sidebar_position:24,sidebar_label:"Table Component health check"},sidebar:"defaultSidebar",previous:{title:"Component health check",permalink:"/docs/dashboards-and-widgets/ComponentHealthCheck"},next:{title:"Most time-consuming test cases widget (TOP-20)",permalink:"/docs/dashboards-and-widgets/MostTimeConsumingTestCasesWidgetTop20"}},l={},u=[{value:"Why can this widget can be useful for your project",id:"why-can-this-widget-can-be-useful-for-your-project",level:2},{value:"Use case #1",id:"use-case-1",level:3},{value:"Use case #2",id:"use-case-2",level:3}],c={toc:u},p="wrapper";function d(e){let{components:t,...r}=e;return(0,o.kt)(p,(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"table-component-health-check"},"Table Component health check"),(0,o.kt)("p",null,"Shows the detailed statisctics of the application components which are indicated by the specified attributes."),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("strong",{parentName:"p"},"Note:")," for using this widget you need to report (or add manually) attributes to test items.")),(0,o.kt)("h2",{id:"why-can-this-widget-can-be-useful-for-your-project"},"Why can this widget can be useful for your project"),(0,o.kt)("p",null,"Let's look at several use cases on how you can utilize Component Health Check Widget."),(0,o.kt)("h3",{id:"use-case-1"},"Use case #1"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Use Case:")," To track information regarding the latest version in version ",(0,o.kt)("strong",{parentName:"p"},"without filter update")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Problem:")," You are a test lead, and you want to track information regarding the latest results without any additional movements. Your version contains several launches: a launch with API test cases, a launch with UI test cases, and a launch with Integration test cases.\nYou need to track summary statistics for the latest results for API launch, UI launch, and Integration launch.\nFor that reason, you have added an attribute 'version: XXX\" to all needed launches, where specify the number of versions. And you have created a filter that includes all launches with the mentioned attribute.\nNow you can create a widget Overall statistics for instance. And this widget will show you a summary of the latest results for version: xxx.\nBut if you run a new version (for instance version: xxx+1), you should repeat previous actions one more time: create the filter, update the widget."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Solution:")," How you can skip these steps. Create filter which includes 3 launches: API launch, UI launch, and Integration launch. Create a Component Health Check widget (table view) with this filter and add attribute key 'version' for grouping. Now you will see a summary for the latest version every day. If a new version appears in the system, a widget automatically removes info about the previous one and adds the latest version."),(0,o.kt)("media-view",{src:a(43652),alt:"Dashboard to manage test results: Component Health Check Table"}),(0,o.kt)("h3",{id:"use-case-2"},"Use case #2"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Use Case:")," To track information regarding components such features/browsers/ platforms/ or others"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Problem:")," You are running different launches API launch, UI launch, and Integration launch. In these 3 launches, there are test cases which belong to different features. One feature can have test cases with different types: API, UI, Integration. You need to track overall statistics for features, not for launch."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Solution:")," Create filter which includes 3 launches: API launch, UI launch, and Integration launch. Create a Component Health Check widget (table view) with this filter and add attribute key 'feature' for grouping. Now you will see a summary for all features from different launches."),(0,o.kt)("media-view",{src:a(59584),alt:"Component Health Check Table Key Feature"}),(0,o.kt)("p",null,"Widget logic is the same as for ",(0,o.kt)("a",{parentName:"p",href:"./ComponentHealthCheck"},"Component health check"),"."),(0,o.kt)("media-view",{thumbnail:a(43652),src:"https://youtu.be/uRCpA7zivZU",alt:"Component Health Check Table Widget Video",type:"video"}),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Widget's parameters:")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Filter"),(0,o.kt)("li",{parentName:"ul"},"Parameters: All launches/ Latest launches"),(0,o.kt)("li",{parentName:"ul"},"The min allowable passing rate for the component: Possible value from 50 - 100%. Default value 100%."),(0,o.kt)("li",{parentName:"ul"},"Attribute key for the first level (mandatory)"),(0,o.kt)("li",{parentName:"ul"},"Attribute key for the 2-10 levels (optional)"),(0,o.kt)("li",{parentName:"ul"},"Custom column")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Widget view")),(0,o.kt)("p",null,"The widget has a table view. Each line contains information regarding one component (one unique attribute value):"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"component name"),(0,o.kt)("li",{parentName:"ul"},"component passing rate"),(0,o.kt)("li",{parentName:"ul"},"statistics: Total/Passed/Failed/Skipped/ Product bugs/ Automation bugs/ System issues/ To investigate"),(0,o.kt)("li",{parentName:"ul"},"information about attribute value in the custom column")),(0,o.kt)("p",null,"The total line shows a summary of all components."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Custom column")),(0,o.kt)("p",null,"Why you may need a custom column? Let's see it in the example."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Use case #3")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Use Case:")," You need to understand the impact of failed test cases"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Problem:")," You created a Component Health Check widget and can see a list with features and their passing rate. But you can not understand the importance of failed features."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Solution:")," Add for all test executions attributes with an attribute key 'priority: XXX'. For instance:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"priority: low"),(0,o.kt)("li",{parentName:"ul"},"priority: major"),(0,o.kt)("li",{parentName:"ul"},"priority: critical")),(0,o.kt)("p",null,"Then add to widget wizard attribute key 'priority' in the custom column field.\nSo that system adds to the widget view information regarding priority to each feature."),(0,o.kt)("p",null,"*",(0,o.kt)("em",{parentName:"p"},"Custom sorting")),(0,o.kt)("p",null,"You can choose how components should be sorted in the table.\nPossible criteria:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Total"),(0,o.kt)("li",{parentName:"ul"},"Passing rate"),(0,o.kt)("li",{parentName:"ul"},"Custom column"),(0,o.kt)("li",{parentName:"ul"},"Failed items")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("strong",{parentName:"p"},"Note:")," Component Health Check widget (table view) is the first widget that uses a materialized view of PostgreSQL. It takes time to create it. So that is why information about new launches in the filter adds dynamically. For that reason, a user should update a widget manually by \u0441licking on the update button. On the widget, a user can see the time for the last update.")))}d.isMDXComponent=!0},43652:(e,t,a)=>{a.r(t),a.d(t,{default:()=>n});const n=a.p+"assets/images/ComponentHealthCheckTableBuild-6d3d772d5ab2b02d25e31ab999bc5f6f.png"},59584:(e,t,a)=>{a.r(t),a.d(t,{default:()=>n});const n=a.p+"assets/images/ComponentHealthCheckTableFeature-f69052972c2b51f85fc1d5915a4d9d68.png"}}]);