"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[9824],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var i=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,i,o=function(e,t){if(null==e)return{};var n,i,o={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=i.createContext({}),u=function(e){var t=i.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},p=function(e){var t=u(e.components);return i.createElement(l.Provider,{value:t},e.children)},c="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},d=i.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),c=u(n),d=o,m=c["".concat(l,".").concat(d)]||c[d]||h[d]||a;return n?i.createElement(m,r(r({ref:t},p),{},{components:n})):i.createElement(m,r({ref:t},p))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,r=new Array(a);r[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[c]="string"==typeof e?e:o,r[1]=s;for(var u=2;u<a;u++)r[u]=n[u];return i.createElement.apply(null,r)}return i.createElement.apply(null,n)}d.displayName="MDXCreateElement"},62047:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>u});var i=n(87462),o=(n(67294),n(3905));const a={sidebar_label:"Integration with GitHub Actions"},r="Integration with GitHub Actions",s={unversionedId:"quality-gates/IntegrationWithCICD/IntegrationWithGitHubActions",id:"quality-gates/IntegrationWithCICD/IntegrationWithGitHubActions",title:"Integration with GitHub Actions",description:"In this tutorial, we will walk you through the process of integrating ReportPortal with GitHub Actions.",source:"@site/docs/quality-gates/IntegrationWithCICD/IntegrationWithGitHubActions.md",sourceDirName:"quality-gates/IntegrationWithCICD",slug:"/quality-gates/IntegrationWithCICD/IntegrationWithGitHubActions",permalink:"/docs/quality-gates/IntegrationWithCICD/IntegrationWithGitHubActions",draft:!1,editUrl:"https://github.com/reportportal/docs/blob/develop/docs/quality-gates/IntegrationWithCICD/IntegrationWithGitHubActions.md",tags:[],version:"current",frontMatter:{sidebar_label:"Integration with GitHub Actions"},sidebar:"defaultSidebar",previous:{title:"Integration with CI/CD",permalink:"/docs/quality-gates/IntegrationWithCICD/"},next:{title:"Integration with GitLab CI",permalink:"/docs/quality-gates/IntegrationWithCICD/IntegrationWithGitLabCI"}},l={},u=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Using GitHub Actions workflow file",id:"using-github-actions-workflow-file",level:2},{value:"Define workflow structure and rules",id:"define-workflow-structure-and-rules",level:2},{value:"Getting test secrets",id:"getting-test-secrets",level:2},{value:"Running tests",id:"running-tests",level:2},{value:"Kotlin tests",id:"kotlin-tests",level:3},{value:"Python tests",id:"python-tests",level:3},{value:"Setting up Quality Gates integration (optional)",id:"setting-up-quality-gates-integration-optional",level:2},{value:"Getting Launch UUID for Kotlin tests",id:"getting-launch-uuid-for-kotlin-tests",level:3},{value:"Getting Launch UUID for Python tests",id:"getting-launch-uuid-for-python-tests",level:3},{value:"Adding Quality Gates stage",id:"adding-quality-gates-stage",level:3},{value:"Conclusion",id:"conclusion",level:2}],p={toc:u},c="wrapper";function h(e){let{components:t,...n}=e;return(0,o.kt)(c,(0,i.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"integration-with-github-actions"},"Integration with GitHub Actions"),(0,o.kt)("p",null,"In this tutorial, we will walk you through the process of integrating ReportPortal with GitHub Actions."),(0,o.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,o.kt)("p",null,"To run your tests in any kind of CI, you first need a way to execute them in the\nconsole. For example, for Java this might be calling a build tool like Gradle or Maven\nwith: ",(0,o.kt)("inlineCode",{parentName:"p"},"./gradlew test")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"./mvnw test")," respectively. For Python, it might be\n",(0,o.kt)("inlineCode",{parentName:"p"},"pytest")," command. Your tests should be already integrated with a ReportPortal agent. To\nfind out how to do that, check out our documentation on ",(0,o.kt)("a",{parentName:"p",href:"/log-data-in-reportportal/test-framework-integration/"},"corresponding\npage"),".\nYou also need a working ReportPortal instance. We will be using GitHub Actions secrets, to securely get our\ncredentials while the workflow is running, see official ",(0,o.kt)("a",{parentName:"p",href:"https://docs.github.com/en/actions/security-guides/using-secrets-in-github-actions"},"GitHub Docs\n")," for more details."),(0,o.kt)("h2",{id:"using-github-actions-workflow-file"},"Using GitHub Actions workflow file"),(0,o.kt)("p",null,"We are going to use the ",(0,o.kt)("inlineCode",{parentName:"p"},".github/workflows/ci.yml")," file to store and modify our CI workflow,\nthis file should be hosted in the same Git repository which contains your\ntests. This is the only way to which is used by GitHub Actions to set up\nworkflow configuration. More on Workflow syntax you can find in the official\n",(0,o.kt)("a",{parentName:"p",href:"https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions"},"documentation"),"."),(0,o.kt)("h2",{id:"define-workflow-structure-and-rules"},"Define workflow structure and rules"),(0,o.kt)("p",null,"Before running tests, we need to define the steps we want to pass in our workflow.\nThis is the common thing for any language or framework you might use, so let\u2019s\ndo that."),(0,o.kt)("p",null,"First, we need to define workflow triggers to have an ability to run it when you need it, otherwise it will never run.\nSecond, we need to run setup steps, to install necessary libraries. Third, we need run tests with credentials which we\ngot from the GitHub Actions secrets. And forth, enterprise users might also want to utilize our Quality Gates plugin to\nget more control over application-under-test quality, this will be described in the last section of the current article."),(0,o.kt)("p",null,"So, let's start with a basic yaml file skeleton:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"name: CI Tests\n\non:\n  workflow_dispatch:\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n      # Download sources from git repository, a common step for all Actions workflows\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Set up language\n        run: ''\n\n      - name: Install dependencies\n        run: ''\n\n      - name: Test\n        run: ''\n")),(0,o.kt)("p",null,"Notice we use the ",(0,o.kt)("inlineCode",{parentName:"p"},"workflow_dispatch")," option to run the job, that means the workflow can only be run manually, through\nworkflow history view."),(0,o.kt)("h2",{id:"getting-test-secrets"},"Getting test secrets"),(0,o.kt)("p",null,"GitHub supports native secret storage for projects and organizations, the link on the documentation was provided above."),(0,o.kt)("p",null,"Let's securely store ",(0,o.kt)("inlineCode",{parentName:"p"},"RP_ADMIN_PASSWORD")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"RP_DEMO_KEY")," variables in our project. To set Actions secret variables,\nwe need a project where you have admin rights:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Open base project page."),(0,o.kt)("li",{parentName:"ol"},'Click "Settings" tab.'),(0,o.kt)("li",{parentName:"ol"},'Expand "Secrets and variables" section in the left menu.'),(0,o.kt)("li",{parentName:"ol"},'Click "Actions".'),(0,o.kt)("li",{parentName:"ol"},'In the "Repository secrets" section click "New repository secret" button.'),(0,o.kt)("li",{parentName:"ol"},"Put Secret Name and Value in the corresponding fields.")),(0,o.kt)("p",null,"For our example we need 2 such variables:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"RP_ADMIN_PASSWORD \u2013 example secret."),(0,o.kt)("li",{parentName:"ul"},"RP_DEMO_KEY \u2013 another example secret.")),(0,o.kt)("p",null,"After that these secrets will be accessible during workflow run by specifying special placeholder values in workflow,\nE.G. ",(0,o.kt)("inlineCode",{parentName:"p"},"${{ secrets.RP_ADMIN_PASSWORD }}")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"${{ secrets.RP_DEMO_KEY }}"),"."),(0,o.kt)("h2",{id:"running-tests"},"Running tests"),(0,o.kt)("p",null,"Let's imagine we need to run our tests on two different languages: Python based\ntests running with pytest and Kotlin based tests running with Gradle. These are\ntwo rather different environments with very different approaches which should\ngive you an idea of how that works."),(0,o.kt)("h3",{id:"kotlin-tests"},"Kotlin tests"),(0,o.kt)("p",null,"Let's imagine that to run our Kotlin tests we need a very specific version of Kotlin. Sine some time in the past GitHub\nActions base images go with pre-installed Kotlin, but we can only use it as is, and can't choose any version. Luckily,\nthere are options how to install specific version of the language."),(0,o.kt)("p",null,'Here is updated the "steps" section of our workflow Yaml with Kotlin installation:'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},'name: CI Tests\n\non:\n  workflow_dispatch:\n\nenv:\n  KOTLIN_VERSION: \'1.4.32\'\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Set up Kotlin\n        run: |\n          kotlinc -version\n          rm -rf /usr/share/kotlinc\n          curl -L "https://github.com/JetBrains/kotlin/releases/download/v$KOTLIN_VERSION/kotlin-compiler-$KOTLIN_VERSION.zip" -o /tmp/kotlin-compiler.zip\n          unzip /tmp/kotlin-compiler.zip -d /usr/share\n          export PATH="$PATH:/opt/kotlinc/bin"\n          echo "$PATH"\n          kotlinc -version\n')),(0,o.kt)("p",null,"As you can see, we remove existing Kotlin installation in ",(0,o.kt)("inlineCode",{parentName:"p"},"/usr/share/kotlinc"),", then we download necessary Kotlin\nversion, unzip it to the same place ",(0,o.kt)("inlineCode",{parentName:"p"},"/usr/share")," to make the Kotlin compiler available from any folder in command line,\nsince it was already pre-configured. We also output Kotlin version before and after the installation.\nKotlin version was moved to a variable to ease further workflow updates."),(0,o.kt)("p",null,"Now, let's run our tests:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},'name: CI Tests\n\non:\n  workflow_dispatch:\n\nenv:\n  KOTLIN_VERSION: \'1.4.32\'\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Set up Kotlin\n        run: |\n          kotlinc -version\n          rm -rf /usr/share/kotlinc\n          curl -L "https://github.com/JetBrains/kotlin/releases/download/v$KOTLIN_VERSION/kotlin-compiler-$KOTLIN_VERSION.zip" -o /tmp/kotlin-compiler.zip\n          unzip /tmp/kotlin-compiler.zip -d /usr/share\n          export PATH="$PATH:/opt/kotlinc/bin"\n          echo "$PATH"\n          kotlinc -version\n\n      - name: Test\n        run: |\n          # Cast execution flag on gradle wrapper script file, just in case\n          chmod +x ./gradlew\n          ./gradlew :service-api:demoSmoke -Prp.api.key=${{ secrets.RP_DEMO_KEY }} -Prp.admin.password=${{ secrets.RP_ADMIN_PASSWORD }}\n')),(0,o.kt)("p",null,"We run our tests with Gradle wrapper and cast execution flag on runner script\njust in case. We also bypass our secrets through command line parameters to our\nGradle to use later in tests. They won't be exposed, since GitHub Actions will cut them off from the output."),(0,o.kt)("h3",{id:"python-tests"},"Python tests"),(0,o.kt)("p",null,"Python tests have less configuration complexity, compared to Kotlin. It uses existing Action to install Python and adds\nadditional step to install dependencies. We start with installing required version of  Python: ",(0,o.kt)("inlineCode",{parentName:"p"},"3.10.13"),". In the next\nstep we can install our requirements for the project and run tests in the Test section with ",(0,o.kt)("inlineCode",{parentName:"p"},"pytest")," command."),(0,o.kt)("p",null,'Here is the updated "test" section of our pipeline Yaml:'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"name: CI Tests\n\non:\n  workflow_dispatch:\n\nenv:\n  PYTHON_VERSION: '3.10.13'\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Set up Python\n        uses: actions/setup-python@v4\n        with:\n          python-version: '${{ env.PYTHON_VERSION }}'\n\n      - name: Install dependencies\n        run: |\n          python -m pip install --upgrade pip\n          pip install -rrequirements.txt -rrequirements-dev.txt\n\n      - name: Test\n        run: |\n          pytest -sv --reportportal -m \"not command_skip\" -n 2 -o \"rp_api_key=${{ secrets.RP_DEMO_KEY }}\" tests\n")),(0,o.kt)("p",null,"As you can see, we pass ",(0,o.kt)("inlineCode",{parentName:"p"},"RP_DEMO_KEY")," through the command line, that\u2019s safe, it won't be exposed, since GitHub Actions\nwill cut it off from the output."),(0,o.kt)("h2",{id:"setting-up-quality-gates-integration-optional"},"Setting up Quality Gates integration (optional)"),(0,o.kt)("p",null,"Enterprise users can utilize our Quality Gates plugin to get more\ncontrol over application-under-test quality. To enable and configure Quality Gates plugin on\nReportPortal, please, refer to ",(0,o.kt)("a",{parentName:"p",href:"/category/quality-gates"},"corresponding documentation"),"."),(0,o.kt)("p",null,"ReportPortal's Quality Gates plugin doesn't have native integration with GitHub Actions, so we\nneed to use a custom approach here. One way is polling ReportPortal Launch info API for\na specific value, which the Quality Gates plugin leaves after passing. For that we need Launch\nUUID, which is a unique Launch identifier."),(0,o.kt)("h3",{id:"getting-launch-uuid-for-kotlin-tests"},"Getting Launch UUID for Kotlin tests"),(0,o.kt)("p",null,"Every Java Agent has specific properties which control Launch UUID printing,\nsince July 2023. To ensure that check if your Agent has\nthe ",(0,o.kt)("inlineCode",{parentName:"p"},"com.epam.reportportal:client-java")," library dependency of version 5.1.23 or\nlate. It\u2019s generally safe to add exclusion and put a newer version of the library\nto get new features. So these properties are: ",(0,o.kt)("inlineCode",{parentName:"p"},"rp.launch.uuid.print")," and\n",(0,o.kt)("inlineCode",{parentName:"p"},"rp.launch.uuid.print.output"),". You can put them into your\n",(0,o.kt)("inlineCode",{parentName:"p"},"reportportal.properties")," file. Enable Launch UUID printing with the property:\n",(0,o.kt)("inlineCode",{parentName:"p"},"rp.launch.uuid.print = true"),". It will output a line like this into the console:\n",(0,o.kt)("inlineCode",{parentName:"p"},"ReportPortal Launch UUID: 61ce1c26-842a-4bde-9abe-a4696e31d626"),"."),(0,o.kt)("p",null,"Our tests use Gradle to build and run them, unlike other build systems Gradle\nusually hides test output streams and just prints truncated stack trace in case\nof test failures, so we need to tell it not to do that. This is possible if you\nput the following section somewhere into your Gradle test task:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"testLogging {\n  showStandardStreams = true\n}\n")),(0,o.kt)("p",null,"Next, we need to save this UUID to an environment variable which we latter will\nuse in a separate stage in polling ReportPortal API. GitHub Actions allow this with a ",(0,o.kt)("a",{parentName:"p",href:"https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#setting-an-environment-variable"},"specific command\n"),"."),(0,o.kt)("p",null,'Here is the updated "test" stage which does these things:'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},'name: CI Tests\non:\n  workflow_dispatch:\nenv:\n  KOTLIN_VERSION: \'1.4.32\'\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n      - name: Set up Kotlin\n        run: |\n          kotlinc -version\n          rm -rf /usr/share/kotlinc\n          curl -L "https://github.com/JetBrains/kotlin/releases/download/v$KOTLIN_VERSION/kotlin-compiler-$KOTLIN_VERSION.zip" -o /tmp/kotlin-compiler.zip\n          unzip /tmp/kotlin-compiler.zip -d /usr/share\n          export PATH="$PATH:/opt/kotlinc/bin"\n          echo "$PATH"\n          kotlinc -version\n      - name: Test\n        run: |\n          # Cast execution flag on gradle wrapper script file, just in case\n          chmod +x ./gradlew\n          ./gradlew --console=plain :service-api:demoSmoke -Prp.api.key=${{ secrets.RP_DEMO_KEY }} -Prp.admin.password=${{ secrets.RP_ADMIN_PASSWORD }} | tee ./console.log\n          sed -rn \'s/ReportPortal Launch UUID: ([^\\\\r\\\\n]+)/LAUNCH_UUID=\\1/ p\' ./console.log  >> "$GITHUB_ENV"\n')),(0,o.kt)("p",null,"Some explanations here:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"We used the ",(0,o.kt)("inlineCode",{parentName:"li"},"--console=plain")," Gradle parameter to make output suitable for saving in a file."),(0,o.kt)("li",{parentName:"ul"},"To preserve console output, we used the ",(0,o.kt)("inlineCode",{parentName:"li"},"tee")," command, which copies standard input to each specified file, and to standard output."),(0,o.kt)("li",{parentName:"ul"},"We used the ",(0,o.kt)("inlineCode",{parentName:"li"},"sed")," command to format and print our Launch UUID."),(0,o.kt)("li",{parentName:"ul"},"Thus, we got a preformatted string and write it to ",(0,o.kt)("inlineCode",{parentName:"li"},"$GITHUB_ENV")," file.")),(0,o.kt)("p",null,"The last step that creates or updates the environment variable does not have access to the new value, but all subsequent\nsteps in a job will have access."),(0,o.kt)("h3",{id:"getting-launch-uuid-for-python-tests"},"Getting Launch UUID for Python tests"),(0,o.kt)("p",null,"ReportPortal pytest agent has specific properties which control Launch UUID printing,\nsince version 5.2.2: ",(0,o.kt)("inlineCode",{parentName:"p"},"rp_launch_uuid_print")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"rp_launch_uuid_print_output"),".\nYou can put them into your ",(0,o.kt)("inlineCode",{parentName:"p"},"pytest.ini")," file. For this example, we just need\none of them: ",(0,o.kt)("inlineCode",{parentName:"p"},"rp_launch_uuid_print = True"),". It will output a line like this\ninto the console:\n",(0,o.kt)("inlineCode",{parentName:"p"},"ReportPortal Launch UUID: 61ce1c26-842a-4bde-9abe-a4696e31d626"),"."),(0,o.kt)("p",null,"Next, we need to save this UUID to an environment variable which we later will\nuse in a separate stage in polling ReportPortal API. GitHub Actions allow this with a ",(0,o.kt)("a",{parentName:"p",href:"https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#setting-an-environment-variable"},"specific command\n"),"."),(0,o.kt)("p",null,'Here is the updated "test" stage which does these things:'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"name: CI Tests\non:\n  workflow_dispatch:\nenv:\n  PYTHON_VERSION: '3.10.13'\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n      - name: Set up Python\n        uses: actions/setup-python@v4\n        with:\n          python-version: '${{ env.PYTHON_VERSION }}'\n      - name: Install dependencies\n        run: |\n          python -m pip install --upgrade pip\n          pip install -rrequirements.txt -rrequirements-dev.txt\n      - name: Test\n        run: |\n          pytest -sv --reportportal -m \"not command_skip\" -n 2 -o \"rp_api_key=${{ secrets.RP_DEMO_KEY }}\" tests | tee ./console.log\n          sed -rn 's/ReportPortal Launch UUID: ([^\\\\r\\\\n]+)/LAUNCH_UUID=\\1/ p' ./console.log  >> \"$GITHUB_ENV\"\n")),(0,o.kt)("p",null,"Some explanations here:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"To preserve console output, we used the ",(0,o.kt)("inlineCode",{parentName:"li"},"tee")," command, which copies standard input to each specified file, and to standard output."),(0,o.kt)("li",{parentName:"ul"},"We used the ",(0,o.kt)("inlineCode",{parentName:"li"},"sed")," command to format and print our Launch UUID."),(0,o.kt)("li",{parentName:"ul"},"Thus, we got a preformatted string and write it to ",(0,o.kt)("inlineCode",{parentName:"li"},"$GITHUB_ENV")," file.")),(0,o.kt)("h3",{id:"adding-quality-gates-stage"},"Adding Quality Gates stage"),(0,o.kt)("p",null,'If you did your pipeline configuration in the same manner as in this article\nthis step will be the same for you, no matter which language do you use. First,\nwe need to configure our "test" stage not to fail in case of unsuccessful\ntests, since we are going to decide about test status on the Quality Gates step. This can be\ndone by adding the ',(0,o.kt)("inlineCode",{parentName:"p"},"continue-on-error: true")," field:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"jobs:\n  build:\n    steps:\n      - ...\n      - name: Test\n        continue-on-error: true\n        run: ...\n")),(0,o.kt)("p",null,"As the next step we need to add the ",(0,o.kt)("inlineCode",{parentName:"p"},"quality-gate")," step to our pipeline:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"jobs:\n  build:\n    steps:\n      - ...\n      - name: Quality Gate\n        run: |\n          ...\n")),(0,o.kt)("p",null,"It's time to finish our workflow, this step will be a rather complex one:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},'env:\n  RP_INSTANCE: \'https://demo.reportportal.io\'\n  SCRIPT_TIMEOUT_SECONDS: 60\n  REQUEST_TIMEOUT_SECONDS: 60\n\njobs:\n  build:\n    steps:\n      - ...\n      - name: Quality Gate\n        run: |\n          echo "Quality gate"\n          echo "LAUNCH_UUID: $LAUNCH_UUID"\n          QUALITY_GATE_STATUS=""\n          START_TIME=$(date +%s)\n          while [ -z "$QUALITY_GATE_STATUS" ] && [ $(( $(date +%s) - START_TIME )) -lt ${{ env.SCRIPT_TIMEOUT_SECONDS }} ]; do\n            echo "Waiting for quality gate status..."\n            sleep 10\n            QUALITY_GATE_JSON=$(curl -s -H "Authorization: Bearer ${{ secrets.RP_DEMO_KEY }}" --max-time "${{ env.REQUEST_TIMEOUT_SECONDS }}" "${{ env.RP_INSTANCE }}/api/v1/report_portal_demo/launch/${LAUNCH_UUID}")\n            QUALITY_GATE_STATUS=$(echo "$QUALITY_GATE_JSON" | jq -r \'.metadata.qualityGate.status // empty\')\n          done\n          if [ "$QUALITY_GATE_STATUS" != "PASSED" ]; then\n            echo "Quality gate status: $QUALITY_GATE_STATUS"\n            echo "Failing the pipeline."\n            exit 1\n          else\n            echo "Quality gate status: $QUALITY_GATE_STATUS"\n            echo "Pipeline passed."\n          fi\n')),(0,o.kt)("p",null,"Notice, we added three new environment variables (do not replace, you need to append them to existing values):\nRP_INSTANCE, REQUEST_TIMEOUT_SECONDS, SCRIPT_TIMEOUT_SECONDS. Which are responsible for ReportPortal base URL\nconfiguration, request timeout and polling timeout respectively. In the script we are polling our ReportPortal\ninstance for Launch info with ",(0,o.kt)("inlineCode",{parentName:"p"},"curl")," and Launch UUID variable, which we got in the previous\nstep. After that with ",(0,o.kt)("inlineCode",{parentName:"p"},"jq")," we are trying to read a specific field in response\nJSON or return empty value if Quality Gate is not passed yet, or request is failed. In\ncase of an empty response, we retry our call to ReportPortal. Finally, we compare ",(0,o.kt)("inlineCode",{parentName:"p"},"jq"),'\noutput with "PASSED" literal and if it\u2019s equal we quit gracefully, or we fail\nthe step in any other case.'),(0,o.kt)("p",null,"And we are finally done!"),(0,o.kt)("h2",{id:"conclusion"},"Conclusion"),(0,o.kt)("p",null,"ReportPortal does not have native integration with GitHub Actions, but that\u2019s not something that\nmight stop you. In this article we set up GitHub Actions integration with ReportPortal using\nshell scripts and console commands. To provide more outlook we described how to run tests in Kotlin and Python."),(0,o.kt)("p",null,"And here are full versions of corresponding pipeline files, which we implemented:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/reportportal/examples-java/blob/master/.gitlab-ci.yml"},"Kotlin")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/reportportal/examples-python/blob/master/.gitlab-ci.yml"},"Python"))))}h.isMDXComponent=!0}}]);