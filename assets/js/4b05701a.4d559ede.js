"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[2822],{3905:(e,t,r)=>{r.d(t,{Zo:()=>l,kt:()=>f});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var p=n.createContext({}),c=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},l=function(e){var t=c(e.components);return n.createElement(p.Provider,{value:t},e.children)},g="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,p=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),g=c(r),m=o,f=g["".concat(p,".").concat(m)]||g[m]||d[m]||a;return r?n.createElement(f,i(i({ref:t},l),{},{components:r})):n.createElement(f,i({ref:t},l))}));function f(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=m;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s[g]="string"==typeof e?e:o,i[1]=s;for(var c=2;c<a;c++)i[c]=r[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},32864:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var n=r(87462),o=(r(67294),r(3905));const a={sidebar_position:4,sidebar_label:"TraceListener"},i="ReportPortal TraceListener Integration",s={unversionedId:"log-data-in-reportportal/test-framework-integration/Net/Loggers/TraceListener",id:"log-data-in-reportportal/test-framework-integration/Net/Loggers/TraceListener",title:"ReportPortal TraceListener Integration",description:"TraceListener is a component of the .NET Framework's logging system. Provides receiving and handling trace messages and forwarding them to the appropriate destination.",source:"@site/docs/log-data-in-reportportal/test-framework-integration/Net/Loggers/TraceListener.md",sourceDirName:"log-data-in-reportportal/test-framework-integration/Net/Loggers",slug:"/log-data-in-reportportal/test-framework-integration/Net/Loggers/TraceListener",permalink:"/docs/log-data-in-reportportal/test-framework-integration/Net/Loggers/TraceListener",draft:!1,editUrl:"https://github.com/reportportal/docs/blob/develop/docs/log-data-in-reportportal/test-framework-integration/Net/Loggers/TraceListener.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4,sidebar_label:"TraceListener"},sidebar:"defaultSidebar",previous:{title:"NLog",permalink:"/docs/log-data-in-reportportal/test-framework-integration/Net/Loggers/NLog"},next:{title:"Python",permalink:"/docs/log-data-in-reportportal/test-framework-integration/Python/"}},p={},c=[],l={toc:c},g="wrapper";function d(e){let{components:t,...r}=e;return(0,o.kt)(g,(0,n.Z)({},l,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"reportportal-tracelistener-integration"},"ReportPortal TraceListener Integration"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.tracelistener?view=net-8.0"},"TraceListener")," is a component of the .NET Framework's logging system. Provides receiving and handling trace messages and forwarding them to the appropriate destination."),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/reportportal/logger-net-tracelistener#readme"},"Installation guide")))}d.isMDXComponent=!0}}]);