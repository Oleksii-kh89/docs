"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[2346],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=p(n),m=r,h=u["".concat(l,".").concat(m)]||u[m]||d[m]||o;return n?a.createElement(h,i(i({ref:t},c),{},{components:n})):a.createElement(h,i({ref:t},c))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:r,i[1]=s;for(var p=2;p<o;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},10413:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var a=n(87462),r=(n(67294),n(3905));const o={},i="Deploy with AWS ECS Fargate",s={unversionedId:"installation-steps/DeployWithAWSECSFargate",id:"installation-steps/DeployWithAWSECSFargate",title:"Deploy with AWS ECS Fargate",description:"Provided by contributor, not verified by RP team, please use with caution.",source:"@site/docs/installation-steps/DeployWithAWSECSFargate.md",sourceDirName:"installation-steps",slug:"/installation-steps/DeployWithAWSECSFargate",permalink:"/docs/installation-steps/DeployWithAWSECSFargate",draft:!1,editUrl:"https://github.com/reportportal/docs/blob/develop/docs/installation-steps/DeployWithAWSECSFargate.md",tags:[],version:"current",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"Deploy on Ubuntu OS",permalink:"/docs/installation-steps/DeployOnUbuntuOS"},next:{title:"ReportPortal 23.1 File storage options",permalink:"/docs/installation-steps/ReportPortal23.1FileStorageOptions"}},l={},p=[{value:"Pre-requisites",id:"pre-requisites",level:3},{value:"Deployment",id:"deployment",level:3},{value:"Elastic File System",id:"elastic-file-system",level:4},{value:"PostreSQL database",id:"postresql-database",level:4},{value:"Load Balancer",id:"load-balancer",level:4},{value:"KMS Key",id:"kms-key",level:4},{value:"Secrets",id:"secrets",level:4},{value:"IAM Role",id:"iam-role",level:4},{value:"Security Groups",id:"security-groups",level:4},{value:"RP Applications",id:"rp-applications",level:4},{value:"DNS",id:"dns",level:4},{value:"Validation",id:"validation",level:3}],c={toc:p},u="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(u,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"deploy-with-aws-ecs-fargate"},"Deploy with AWS ECS Fargate"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Provided by contributor, not verified by RP team, please use with caution."))),(0,r.kt)("p",null,"ReportPortal can be deployed using AWS ECS Fargate by interpreting the ",(0,r.kt)("a",{parentName:"p",href:"https://raw.githubusercontent.com/reportportal/reportportal/master/docker-compose.yml"},"docker-compose.yml")),(0,r.kt)("h3",{id:"pre-requisites"},"Pre-requisites"),(0,r.kt)("p",null,"Ensure following services are available in the chosen AWS region & you have permissions to create/modify the resources."),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Elastic File System"),(0,r.kt)("li",{parentName:"ol"},"Aurora PostgreSQL Serverless RDS instance"),(0,r.kt)("li",{parentName:"ol"},"AWS EC2"),(0,r.kt)("li",{parentName:"ol"},"AWS Secrets Manager"),(0,r.kt)("li",{parentName:"ol"},"AWS Lambda"),(0,r.kt)("li",{parentName:"ol"},"AWS ECS"),(0,r.kt)("li",{parentName:"ol"},"AWS Cloudwatch"),(0,r.kt)("li",{parentName:"ol"},"AWS IAM"),(0,r.kt)("li",{parentName:"ol"},"AWS KMS"),(0,r.kt)("li",{parentName:"ol"},"Route53")),(0,r.kt)("h3",{id:"deployment"},"Deployment"),(0,r.kt)("h4",{id:"elastic-file-system"},"Elastic File System"),(0,r.kt)("p",null,"Create Elastic FileSystem with 2 access points i.e., for minio & elasticsearch."),(0,r.kt)("h4",{id:"postresql-database"},"PostreSQL database"),(0,r.kt)("p",null,"Create Aurora Serverless RDS PostgreSQL instance (Engine Version: 13.6) with minimum 2 ACUs and maximum 16 ACUs"),(0,r.kt)("h4",{id:"load-balancer"},"Load Balancer"),(0,r.kt)("p",null,"Create Elastic Application LoadBalancer - internal OR internet facing (based on your requirement) with following target groups"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Traefik with target as IP, port 8080 and health-check path ",(0,r.kt)("inlineCode",{parentName:"li"},"/ping"),"."),(0,r.kt)("li",{parentName:"ol"},"Index with target as Lambda & health checks disabled.")),(0,r.kt)("p",null,"Also, create following rules on the listener of load-balancer"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Default rule should forward requests to Traefik target group."),(0,r.kt)("li",{parentName:"ol"},"Paths matching pattern ",(0,r.kt)("inlineCode",{parentName:"li"},"/composite/info"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"/composite/health"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"/ui")," & ",(0,r.kt)("inlineCode",{parentName:"li"},"/")," should be forwarded to Index target group.")),(0,r.kt)("h4",{id:"kms-key"},"KMS Key"),(0,r.kt)("p",null,"Create a symmetric encryption KMS key with relevant permissions to manage & access key."),(0,r.kt)("h4",{id:"secrets"},"Secrets"),(0,r.kt)("p",null,"Create Secrets to store the credentials & config of the components & refer the values in ECS task definition environment variables section. For the encryption key choose the custom KMS key created above."),(0,r.kt)("p",null,"Secret Structure:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{   \n    "app_username": "foo",\n    "app_password: "bar"\n}\n')),(0,r.kt)("p",null,"During the ECS Task Definition creation choose valueFrom by referring the SecretsManager ARN in the environment variables section as follows\nEg:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'    {\n        "name": "RABBITMQ_DEFAULT_PASS",\n        "valueFrom": "arn:aws:secretsmanager:us-east-1:XXXXXXXXX:secret:report-portal-rmq-zBcd:app_password::"\n    }\n')),(0,r.kt)("h4",{id:"iam-role"},"IAM Role"),(0,r.kt)("p",null,"Create an IAM role with following permissions"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"KMS encryption & decryption"),(0,r.kt)("li",{parentName:"ol"},"SecretsManager Read access"),(0,r.kt)("li",{parentName:"ol"},"ECS Task creation"),(0,r.kt)("li",{parentName:"ol"},"EFS access"),(0,r.kt)("li",{parentName:"ol"},"Write access to CloudWatch log groups")),(0,r.kt)("h4",{id:"security-groups"},"Security Groups"),(0,r.kt)("p",null,"Create Security Groups for"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Access to application - attach to Load Balancer"),(0,r.kt)("li",{parentName:"ol"},"Access to RP components (with the default ports of apps) & EFS mount (inbound rule to port 2049) - attach to all ECS task definitions.")),(0,r.kt)("h4",{id:"rp-applications"},"RP Applications"),(0,r.kt)("p",null,"Most of the configuration remains same for the applications as per the docker-compose.yml file except few overrides as per cloud provider. Ensure the components are deployed within VPC scope & disable public IP assignment where ever applicable."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Migrations:"),"\nCreate Task Def for migrations & just run the task to apply the database schema. Since it's a one time task there's no need to create service."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Minio & Elasticsearch:"),"\nCreate Task Def for these components by adding Elastic File System mountpoints & launch the services."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"RabbitMQ"),"\nCreate Task Def for RabbitMQ by mapping the credentials from SecretsManager in the environment variables."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"API, jobs, metrics-gatherer, analyzer, analyzer-train & ui:")),(0,r.kt)("p",null,"Create Task Def for each of these components & add dockerlabel with ",(0,r.kt)("inlineCode",{parentName:"p"},"@ecs"),' suffix as per the provider.\nEg: "traefik.http.routers.api.middlewares": "api-strip-prefix@ecs"'),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Traefik:")),(0,r.kt)("p",null,"a. Create Task Def with following configuration (Launch Type as Fargate) "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'- image: "traefik:v2.4",\n- entryPoint: "traefik"\n- command: "--providers.ecs=true", "--ping=true", "--ping.entrypoint=web", "--providers.ecs.region=AWS_REGION","--providers.ecs.clusters=report-portal","--providers.ecs.exposedByDefault=false","--providers.ecs.refreshSeconds=60","--entrypoints.web.address=:8080","--entrypoints.traefik.address=:8081","--api.dashboard=true","--api.insecure=true","--log.level=DEBUG","--accesslog=true","--accesslog.format=json"\n')),(0,r.kt)("p",null,"b. Create ECS Service mapping to the Traefik Target Group\nc. Now inspect the logs of traefik service to see if all RP components are being picked up in the configuration from ECS provider."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Index:"),"\nFor some obvious reasons the index (with Ruby runtime) service couldn't run on ECS - hence ported to Lambda with Python runtime.\nCreate a lambda function with 128M memory & 120s timeout with following code."),(0,r.kt)("p",null,"Add environment variable ",(0,r.kt)("inlineCode",{parentName:"p"},"TRAEFIK_SERVICES_URL")," with the IP address of Traefik endpoint (it can be fetched from the task details. Eg: ",(0,r.kt)("a",{parentName:"p",href:"http://192.168.2.120:8081"},"http://192.168.2.120:8081"),")"),(0,r.kt)("p",null,"mureq can be obtained from ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/slingamn/mureq/blob/master/mureq.py"},"mureq.py")," - place it beside the ",(0,r.kt)("inlineCode",{parentName:"p"},"lamda_function.py")," file."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'import os\nimport json\nimport mureq\n\n\ndef lambda_handler(event, context):\n    print("-------------------EVENT BEGIN-------------------------------")\n    print(event)\n    print("-------------------EVENT END-------------------------------")\n    traefik_services= mureq.get(os.environ[\'TRAEFIK_SERVICES_URL\'])\n    \n    if event[\'path\'] == \'/composite/info\':\n        rp_status = {}\n        for service in traefik_services.json():\n            if "loadBalancer" in service:\n                app_name = service[\'name\'].replace(\'@ecs\',\'\')\n                app_info = mureq.get(service[\'loadBalancer\'][\'servers\'][0][\'url\'] + \'/info\')\n                rp_status.update({app_name: app_info.json()})\n        return{\n            "statusCode": 200,\n            "statusDescription": "200 OK",\n            "isBase64Encoded": False,\n            "headers": {\n                "Content-Type": "application/json"\n            },\n            "body": json.dumps(rp_status)\n        }\n    if event[\'path\'] == \'/composite/health\':\n        rp_health = {}\n        for service in traefik_services.json():\n            if "loadBalancer" in service:\n                app_name = service[\'name\'].replace(\'@ecs\',\'\')\n                app_health = list(service[\'serverStatus\'].values())[0]\n                rp_health.update({app_name: app_health})\n        return{\n            "statusCode": 200,\n            "statusDescription": "200 OK",\n            "isBase64Encoded": False,\n            "headers": {\n                "Content-Type": "application/json"\n            },\n            "body": json.dumps(rp_health)\n        }\n    if event[\'path\'] == \'/\':\n        redirect_url= event[\'headers\'][\'x-forwarded-proto\'] + "://" + event[\'headers\'][\'host\'] + \'/ui\'\n        print(redirect_url)\n        return{\n            "statusCode": 301,\n            "statusDescription": "301 Found",\n            "isBase64Encoded": False,\n            "headers": {\n                "Location": redirect_url\n            },\n            "body": ""\n        }\n        \n    if event[\'path\'] == \'/ui\':\n        redirect_url= event[\'headers\'][\'x-forwarded-proto\'] + "://" + event[\'headers\'][\'host\'] + \'/ui/\'\n        print(redirect_url)\n        return{\n            "statusCode": 301,\n            "statusDescription": "301 Found",\n            "isBase64Encoded": False,\n            "headers": {\n                "Location": redirect_url\n            },\n            "body": ""\n        }\n')),(0,r.kt)("p",null,"Now add this lambda to the Index TargetGroup created earlier."),(0,r.kt)("h4",{id:"dns"},"DNS"),(0,r.kt)("p",null,"Add relevent DNS records in the Route53 hostedzone."),(0,r.kt)("h3",{id:"validation"},"Validation"),(0,r.kt)("p",null,"Access the application with default credentials once the DNS record addition is propogated & validate if all sections are loading without errors."))}d.isMDXComponent=!0}}]);