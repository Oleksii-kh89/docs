"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[4612],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=p(n),h=i,m=c["".concat(s,".").concat(h)]||c[h]||d[h]||o;return n?a.createElement(m,r(r({ref:t},u),{},{components:n})):a.createElement(m,r({ref:t},u))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,r=new Array(o);r[0]=h;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[c]="string"==typeof e?e:i,r[1]=l;for(var p=2;p<o;p++)r[p]=n[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},90146:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var a=n(87462),i=(n(67294),n(3905));const o={sidebar_label:"Integration with GitLab CI"},r="Integration with GitLab CI",l={unversionedId:"quality-gates/IntegrationWithCICD/IntegrationWithGitLabCI",id:"quality-gates/IntegrationWithCICD/IntegrationWithGitLabCI",title:"Integration with GitLab CI",description:"In this tutorial we will walk you through the process of integrating ReportPortal with GitLab CI. It is not the case for GitLab, but there are some recipes.",source:"@site/docs/quality-gates/IntegrationWithCICD/IntegrationWithGitLabCI.md",sourceDirName:"quality-gates/IntegrationWithCICD",slug:"/quality-gates/IntegrationWithCICD/IntegrationWithGitLabCI",permalink:"/docs/quality-gates/IntegrationWithCICD/IntegrationWithGitLabCI",draft:!1,editUrl:"https://github.com/reportportal/docs/blob/develop/docs/quality-gates/IntegrationWithCICD/IntegrationWithGitLabCI.md",tags:[],version:"current",frontMatter:{sidebar_label:"Integration with GitLab CI"},sidebar:"defaultSidebar",previous:{title:"Integration with CI/CD",permalink:"/docs/quality-gates/IntegrationWithCICD/"},next:{title:"Integration with Jenkins",permalink:"/docs/quality-gates/IntegrationWithCICD/IntegrationWithJenkins"}},s={},p=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Using Gitlab CI pipeline file",id:"using-gitlab-ci-pipeline-file",level:2},{value:"Define pipeline structure and rules",id:"define-pipeline-structure-and-rules",level:2},{value:"Getting test secrets",id:"getting-test-secrets",level:2},{value:"Running tests",id:"running-tests",level:2},{value:"Kotlin tests",id:"kotlin-tests",level:3},{value:"Python tests",id:"python-tests",level:3},{value:"Setting up Quality Gates integration (optional)",id:"setting-up-quality-gates-integration-optional",level:2},{value:"Getting Launch UUID for Kotlin tests",id:"getting-launch-uuid-for-kotlin-tests",level:3},{value:"Getting Launch UUID for Python tests",id:"getting-launch-uuid-for-python-tests",level:3},{value:"Adding Quality Gates stage",id:"adding-quality-gates-stage",level:3},{value:"Conclusion",id:"conclusion",level:2}],u={toc:p},c="wrapper";function d(e){let{components:t,...n}=e;return(0,i.kt)(c,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"integration-with-gitlab-ci"},"Integration with GitLab CI"),(0,i.kt)("p",null,"In this tutorial we will walk you through the process of integrating ReportPortal with GitLab CI. It is not the case for GitLab, but there are some recipes."),(0,i.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,i.kt)("p",null,"To run your tests in any kind of CI, you first need a way to execute them in the\nconsole. E.G. for Java this might be calling a build tool like Gradle or Maven\nwith: ",(0,i.kt)("inlineCode",{parentName:"p"},"./gradlew test")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"./mvnw test")," respectively. For Python it might be\n",(0,i.kt)("inlineCode",{parentName:"p"},"pytest")," command. Your tests should be already integrated with a ReportPortal agent. To\nfind out how to do that, check out our documentation on ",(0,i.kt)("a",{parentName:"p",href:"/log-data-in-reportportal/test-framework-integration/"},"corresponding\npage"),".\nYou also need a working ReportPortal instance and access to your secret storage, E.G.\n",(0,i.kt)("a",{parentName:"p",href:"https://www.vaultproject.io/"},"HashiCorp Vault"),", to securely get your\ncredentials while the pipeline is running."),(0,i.kt)("h2",{id:"using-gitlab-ci-pipeline-file"},"Using Gitlab CI pipeline file"),(0,i.kt)("p",null,"We are going to use the ",(0,i.kt)("inlineCode",{parentName:"p"},".gitlab-ci.yml")," file to store and modify our CI pipeline,\nthis file should be hosted in the same Git repository which contains your\ntests. We believe this is the most reliable way to reproduce and spread\npipeline configuration for many users. More on ",(0,i.kt)("inlineCode",{parentName:"p"},".gitlab-ci.yml")," syntax you can\nfind in the official ",(0,i.kt)("a",{parentName:"p",href:"https://docs.gitlab.com/ee/ci/yaml/gitlab_ci_yaml.html"},"GitLab documentation"),"."),(0,i.kt)("h2",{id:"define-pipeline-structure-and-rules"},"Define pipeline structure and rules"),(0,i.kt)("p",null,"Before running tests, we need to define the steps we want to pass in our pipeline.\nThis is the common thing for any language or framework you might use, so let\u2019s\ndo that."),(0,i.kt)("p",null,"First, we need to securely get our test credentials from a secure storage.\nThese credentials should not be stored in any kind of logs, artifacts,\nattachments during pipeline execution to avoid security breaches. Second, we\nneed to run tests with those credentials which we got from the first step. And\nthird, enterprise users might also want to utilize our Quality Gates plugin to\nget more control over application-under-test quality, this will be described in\nthe last section of the current article. Additionally, we will disable on-push\npipeline runs and allows only manual triggering."),(0,i.kt)("p",null,"So, let's start with a basic yaml file skeleton:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"workflow:\n  rules:\n    - if: '$CI_PIPELINE_SOURCE == \"push\"'\n      when: never  # Prevent pipeline run for push event\n    - when: always # Run pipeline for all other cases\n\nstages:\n  - secrets\n  - test\n\nsecrets:\n  stage: secrets\n\ntest:\n  stage: test\n  needs: ['secrets']\n")),(0,i.kt)("p",null,"Notice we put the ",(0,i.kt)("inlineCode",{parentName:"p"},"needs: ['secrets']")," property to run the test job only after we set\nup secrets."),(0,i.kt)("h2",{id:"getting-test-secrets"},"Getting test secrets"),(0,i.kt)("p",null,"The latest GitLab CI versions support native integration with HashiCorp Vault\nfor Premium users, we recommend you use it instead of our solution to avoid\nconfiguration troubles. But for free users or older versions of GitLab we can\nprovide our own recipe."),(0,i.kt)("p",null,"As prerequisites configure your Vault server for use with GitLab as described\nin official documentation and enable CI/CD on your project:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://docs.gitlab.com/ee/ci/secrets/#configure-your-vault-server"},"https://docs.gitlab.com/ee/ci/secrets/#configure-your-vault-server")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://docs.gitlab.com/ee/ci/enable_or_disable_ci.html#enable-cicd-in-a-project"},"https://docs.gitlab.com/ee/ci/enable_or_disable_ci.html#enable-cicd-in-a-project"))),(0,i.kt)("p",null,"Next, we are going to need Vault CLI to connect to the Vault Server. While we\ncan definitely install it in the ",(0,i.kt)("inlineCode",{parentName:"p"},"before_script")," section, it's better to use\nthe ",(0,i.kt)("inlineCode",{parentName:"p"},"vault:latest")," base image to just get it. Instead in the ",(0,i.kt)("inlineCode",{parentName:"p"},"before_script")," we will\ninstall just a ",(0,i.kt)("inlineCode",{parentName:"p"},"curl")," tool to be able to call GitLab API."),(0,i.kt)("p",null,"This is how the Secrets section will look like:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"secrets:\n  stage: secrets\n  image: vault:latest\n  before_script:\n    - apk add --no-cache curl\n")),(0,i.kt)("p",null,"The idea of this solution is to get necessary secrets with Vault CLI and set\nthem as project variables to use further in the pipeline. To configure Vault CLI\nfor using the necessary server we can use these environment variables:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"VAULT_ADDR \u2013 remote address of your Vault server."),(0,i.kt)("li",{parentName:"ul"},"VAULT_NAMESPACE \u2013 your working namespace on the server (if not default)."),(0,i.kt)("li",{parentName:"ul"},"VAULT_CACERT \u2013 path to your Certificate Authority certificate."),(0,i.kt)("li",{parentName:"ul"},"VAULT_TOKEN \u2013 a token to access Vault.")),(0,i.kt)("p",null,"So, our Secrets section in the pipeline file will look like that:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'secrets:\n  stage: secrets\n  image: vault:latest\n  before_script:\n    - apk add --no-cache curl\n  script:\n    - export VAULT_ADDR=https://vault.example.com:8200\n    - export VAULT_NAMESPACE=rp/test/\n    # Put your Certificate Authority certificate path here\n    - export VAULT_CACERT=cacert.pem\n    - export VAULT_TOKEN="$(vault write -field=token auth/jwt/login role=tests-develop jwt=$CI_JOB_JWT)"\n    # These fields we get from Vault to operate\n    - RP_ADMIN_PASSWORD=$(vault kv get -field=rp.admin.password secrets/demo/test)\n    - RP_DEMO_KEY=$(vault kv get -field=rp.demo.key secrets/demo/test)\n')),(0,i.kt)("p",null,"Where ",(0,i.kt)("inlineCode",{parentName:"p"},"tests-develop")," in the ",(0,i.kt)("inlineCode",{parentName:"p"},"VAULT_TOKEN")," variable initialization is a role name\nyou should configure on the Vault server as a prerequisite (with\nthe ",(0,i.kt)("inlineCode",{parentName:"p"},"vault policy write [role name]")," command). ",(0,i.kt)("inlineCode",{parentName:"p"},"CI_JOB_JWT")," is an environment\nvariable available in GitLab CI runtime. ",(0,i.kt)("inlineCode",{parentName:"p"},"RP_ADMIN_PASSWORD")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"RP_DEMO_KEY"),"\nare those secrets which we want to get from Vault, they are stored by\nthe ",(0,i.kt)("inlineCode",{parentName:"p"},"secrets/demo/test")," path on Vault and named ",(0,i.kt)("inlineCode",{parentName:"p"},"rp.admin.password")," and\n",(0,i.kt)("inlineCode",{parentName:"p"},"rp.demo.key")," respectively."),(0,i.kt)("p",null,"To set pipeline variables, we need a GitLab API token. Create it with the\nfollowing steps:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Go to the GitLab user's profile page."),(0,i.kt)("li",{parentName:"ol"},"In the left menu select Access Tokens."),(0,i.kt)("li",{parentName:"ol"},"Enter Token name, E.G.: ",(0,i.kt)("inlineCode",{parentName:"li"},"gitlab_cicd"),"."),(0,i.kt)("li",{parentName:"ol"},"Select the Expiration date of the token."),(0,i.kt)("li",{parentName:"ol"},"Check \u201capi\u201d in the Select scopes section."),(0,i.kt)("li",{parentName:"ol"},"Click Create personal access token."),(0,i.kt)("li",{parentName:"ol"},"Copy and save your token from ",(0,i.kt)("inlineCode",{parentName:"li"},"Your new personal access token")," field.")),(0,i.kt)("p",null,"Now let\u2019s create our pipeline variables. To do this, go to your GitLab project\npage and do the following things:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Select Settings > CI/CD."),(0,i.kt)("li",{parentName:"ol"},"Click Expand on the Variables section."),(0,i.kt)("li",{parentName:"ol"},"Click Add variable."),(0,i.kt)("li",{parentName:"ol"},"Fill Key and Value fields."),(0,i.kt)("li",{parentName:"ol"},"(Strongly recommended) check Protect variable and Mask variable checkboxes.")),(0,i.kt)("p",null,"For our example we need 3 such variables:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"GITLAB_API_TOKEN \u2013 for storing the Access token we created, to use GitLab API."),(0,i.kt)("li",{parentName:"ul"},"RP_ADMIN_PASSWORD \u2013 example secret."),(0,i.kt)("li",{parentName:"ul"},"RP_DEMO_KEY \u2013 another example secret.")),(0,i.kt)("p",null,"To finish up our secret setup, we need to update the corresponding section once\nagain:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'secrets:\n  stage: secrets\n  image: vault:latest\n  before_script:\n    - apk add --no-cache curl\n  variables:\n    GITLAB_INSTANCE: \'https://git.example.com\'\n  script:\n    - export VAULT_ADDR=https://vault.example.com:8200\n    - export VAULT_NAMESPACE=rp/test/\n    # Put your Certificate Authority certificate path here\n    - export VAULT_CACERT=cacert.pem\n    - export VAULT_TOKEN="$(vault write -field=token auth/jwt/login role=tests-develop jwt=$CI_JOB_JWT)"\n    # These fields we get from Vault to operate\n    - RP_ADMIN_PASSWORD=$(vault kv get -field=rp.admin.password secrets/demo/test)\n    - RP_DEMO_KEY=$(vault kv get -field=rp.demo.key secrets/demo/test)\n    - >\n      curl -f -s -X PUT --header "Private-Token: $GITLAB_API_TOKEN" --header "Content-Type: application/json"\n      --data \'{"value": "\'"$RP_ADMIN_PASSWORD"\'"}\'\n      "${GITLAB_INSTANCE}/api/v4/projects/$CI_PROJECT_ID/variables/RP_ADMIN_PASSWORD" > /dev/null 2>&1\n    - >\n      curl -f -s -X PUT --header "Private-Token: $GITLAB_API_TOKEN" --header "Content-Type: application/json"\n      --data \'{"value": "\'"$RP_DEMO_KEY"\'"}\'\n      "${GITLAB_INSTANCE}/api/v4/projects/$CI_PROJECT_ID/variables/RP_DEMO_KEY" > /dev/null 2>&1\n')),(0,i.kt)("p",null,"In two new script commands we call GitLab API with the ",(0,i.kt)("inlineCode",{parentName:"p"},"curl")," command setting up\nvalues for our variables: RP_ADMIN_PASSWORD and RP_DEMO_KEY. We use\nGITLAB_API_TOKEN variable to access GitLab API and CI_PROJECT_ID default\nenvironment variable to refer to our current project. Notice that you need to\nreplace ",(0,i.kt)("inlineCode",{parentName:"p"},"git.example.com")," with your git domain. Also notice that with\n",(0,i.kt)("inlineCode",{parentName:"p"},"> /dev/null 2>&1")," command suffix we mute any output from stdout and stderr for\nthe sake of security, to avoid accidental reveal of our secrets in case of request\nlogging or request error logging."),(0,i.kt)("h2",{id:"running-tests"},"Running tests"),(0,i.kt)("p",null,"Let's imagine we need to run our tests on two different languages: Python based\ntests running with pytest and Kotlin based tests running with Gradle. These are\ntwo rather different environments with very different approaches which should\ngive you an idea of how that works."),(0,i.kt)("h3",{id:"kotlin-tests"},"Kotlin tests"),(0,i.kt)("p",null,"As for secrets we need to start with defining the base worker image we are going to\nuse. Unfortunately, there are no official Kotlin Docker images on Docker Hub, so\nwe need to install it ourselves, in the ",(0,i.kt)("inlineCode",{parentName:"p"},"before_script")," section. But Kotlin is a\nJVM based language, so we need Java to run it. Let's pick a common JDK image\nfor that, E.G.: ",(0,i.kt)("inlineCode",{parentName:"p"},"eclipse-temurin:11-jdk-jammy"),", since OpenJDK\u2019s images are\nrather outdated and haven\u2019t been updated for years. This is Ubuntu based image,\nso we can install additional software with ",(0,i.kt)("inlineCode",{parentName:"p"},"apt-get"),"."),(0,i.kt)("p",null,'Here is updated the "test" section of our pipeline Yaml with Kotlin installation:'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"test:\n  stage: test\n  needs: ['secrets']\n  image: eclipse-temurin:11-jdk-jammy\n  variables:\n    KOTLIN_VERSION: '1.4.32'\n  before_script:\n    - apt-get update\n    - apt-get install -y unzip\n    - curl -L https://github.com/JetBrains/kotlin/releases/download/v$KOTLIN_VERSION/kotlin-compiler-$KOTLIN_VERSION.zip -o /tmp/kotlin-compiler.zip\n    - unzip /tmp/kotlin-compiler.zip -d /opt\n    - export PATH=$PATH:/opt/kotlinc/bin\n")),(0,i.kt)("p",null,"As you can see, we install ",(0,i.kt)("inlineCode",{parentName:"p"},"unzip"),", then download the necessary Kotlin version with\ncurl, unzip it to ",(0,i.kt)("inlineCode",{parentName:"p"},"/opt")," and update the ",(0,i.kt)("inlineCode",{parentName:"p"},"PATH")," variable to make the Kotlin compiler\navailable from any folder in command line. Kotlin version was moved to a\nvariable to ease further pipeline updates."),(0,i.kt)("p",null,"Now, let's run our tests:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"test:\n  stage: test\n  needs: ['secrets']\n  image: eclipse-temurin:11-jdk-jammy\n  variables:\n    KOTLIN_VERSION: '1.4.32'\n  before_script:\n    - apt-get update\n    - apt-get install -y unzip\n    - curl -L https://github.com/JetBrains/kotlin/releases/download/v$KOTLIN_VERSION/kotlin-compiler-$KOTLIN_VERSION.zip -o /tmp/kotlin-compiler.zip\n    - unzip /tmp/kotlin-compiler.zip -d /opt\n    - export PATH=$PATH:/opt/kotlinc/bin\n  script:\n    # Cast execution flag on gradle wrapper script file, just in case\n    - chmod +x ./gradlew\n    - ./gradlew :service-api:demoSmoke -Prp.api.key=$RP_DEMO_KEY -Prp.admin.password=$RP_ADMIN_PASSWORD\n")),(0,i.kt)("p",null,"We run our tests with Gradle wrapper and cast execution flag on runner script\njust in case. We also bypass our secrets through command line parameters to our\nGradle to use later in tests. They won't be exposed, since this is not\na replacement, but a reference to a variable."),(0,i.kt)("h3",{id:"python-tests"},"Python tests"),(0,i.kt)("p",null,"Python tests are rather easy to configure, compared to Kotlin. We start with\ndefining the base worker image and we are going to use ",(0,i.kt)("inlineCode",{parentName:"p"},"python:3.10.12"),". This is\nDebian-based image, so we can also install additional software with ",(0,i.kt)("inlineCode",{parentName:"p"},"apt-get"),"\nif necessary. In the ",(0,i.kt)("inlineCode",{parentName:"p"},"before_script")," section we can install our requirements for\nthe project and run tests in the main section with ",(0,i.kt)("inlineCode",{parentName:"p"},"pytest")," command."),(0,i.kt)("p",null,'Here is the updated "test" section of our pipeline Yaml:'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'test:\n  stage: test\n  needs: [\'secrets\']\n  image: python:3.10.12\n  before_script:\n    - python -m pip install --upgrade pip\n    - pip install -rrequirements-dev.txt\n  script:\n    - pytest -sv --reportportal -m "not command_skip" -n 2 -o "rp_api_key=$RP_DEMO_KEY" tests\n')),(0,i.kt)("p",null,"As you can see, we pass ",(0,i.kt)("inlineCode",{parentName:"p"},"RP_DEMO_KEY")," through the command line, that\u2019s safe, since\nthis is not a replacement, but a reference to a variable. You will see just a\nvariable name in the logs."),(0,i.kt)("h2",{id:"setting-up-quality-gates-integration-optional"},"Setting up Quality Gates integration (optional)"),(0,i.kt)("p",null,"Enterprise users can utilize our Quality Gates plugin to get more\ncontrol over application-under-test quality. To enable and configure Quality Gates plugin on\nReportPortal, please, refer to ",(0,i.kt)("a",{parentName:"p",href:"/category/quality-gates"},"corresponding documentation"),"."),(0,i.kt)("p",null,"ReportPortal the Quality Gates plugin doesn't have native integration with GitLab, so we\nneed to use a custom approach here. One way is polling ReportPortal Launch info API for\na specific value, which the Quality Gates plugin leaves after passing. For that we need Launch\nUUID, which is a unique Launch identifier."),(0,i.kt)("h3",{id:"getting-launch-uuid-for-kotlin-tests"},"Getting Launch UUID for Kotlin tests"),(0,i.kt)("p",null,"Every Java Agent has specific properties which control Launch UUID printing,\nsince July 2023. To ensure that check if your Agent has\nthe ",(0,i.kt)("inlineCode",{parentName:"p"},"com.epam.reportportal:client-java")," library dependency of version 5.1.21 or\nlate. It\u2019s generally safe to add exclusion and put a newer version of the library\nto get new features. So these properties are: ",(0,i.kt)("inlineCode",{parentName:"p"},"rp.launch.uuid.print")," and\n",(0,i.kt)("inlineCode",{parentName:"p"},"rp.launch.uuid.print.output"),". You can put them into your\n",(0,i.kt)("inlineCode",{parentName:"p"},"reportportal.properties")," file. Enable Launch UUID printing with the property:\n",(0,i.kt)("inlineCode",{parentName:"p"},"rp.launch.uuid.print = true"),". It will output a line like this into the console:\n",(0,i.kt)("inlineCode",{parentName:"p"},"Report Portal Launch UUID: 61ce1c26-842a-4bde-9abe-a4696e31d626"),"."),(0,i.kt)("p",null,"Our tests use Gradle to build and run them, unlike other build systems Gradle\nusually hides test output streams and just prints truncated stack trace in case\nof test failures, so we need to tell it not to do that. This is possible if you\nput the following section somewhere into your Gradle test task:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"testLogging {\n  showStandardStreams = true\n}\n")),(0,i.kt)("p",null,"Next, we need to save this UUID to an environment variable which we latter will\nuse in a separate stage in polling ReportPortal API. GitLab allows this with ",(0,i.kt)("a",{parentName:"p",href:"https://docs.gitlab.com/ee/ci/variables/#pass-an-environment-variable-to-another-job"},"dotenv\nfiles"),"."),(0,i.kt)("p",null,'Here is the updated "test" stage which does these things:'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"test:\n  stage: test\n  needs: ['secrets']\n  image: eclipse-temurin:11-jdk-jammy\n  variables:\n    KOTLIN_VERSION: '1.4.32'\n  before_script:\n    - apt-get update\n    - apt-get install -y unzip\n    - curl -L https://github.com/JetBrains/kotlin/releases/download/v$KOTLIN_VERSION/kotlin-compiler-$KOTLIN_VERSION.zip -o /tmp/kotlin-compiler.zip\n    - unzip /tmp/kotlin-compiler.zip -d /opt\n    - export PATH=$PATH:/opt/kotlinc/bin\n  script:\n    # Cast execution flag on gradle wrapper script file, just in case\n    - chmod +x ./gradlew\n    - ./gradlew --console=plain :service-api:demoSmoke -Prp.api.key=$RP_DEMO_KEY -Prp.admin.password=$RP_ADMIN_PASSWORD | tee ./console.log\n    - >\n      sed -rn 's/[ ]+Report Portal Launch UUID: ([^\\\\r\\\\n]+)/LAUNCH_UUID=\\1/ w launch.env' ./console.log\n")),(0,i.kt)("p",null,"Some explanations here:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"We used the ",(0,i.kt)("inlineCode",{parentName:"li"},"--console=plain")," Gradle parameter to make output suitable for saving in a file."),(0,i.kt)("li",{parentName:"ul"},"To preserve console output, we used the ",(0,i.kt)("inlineCode",{parentName:"li"},"tee")," command, which copies standard input to each specified file, and to standard output."),(0,i.kt)("li",{parentName:"ul"},"We used the ",(0,i.kt)("inlineCode",{parentName:"li"},"sed")," command to format and save our Launch UUID into ",(0,i.kt)("inlineCode",{parentName:"li"},"launch.env")," file."),(0,i.kt)("li",{parentName:"ul"},"Thus, we got a preformatted ",(0,i.kt)("inlineCode",{parentName:"li"},"launch.env")," file and attached it as an artifact, which then will be used to populate environment variables by GitLab.")),(0,i.kt)("h3",{id:"getting-launch-uuid-for-python-tests"},"Getting Launch UUID for Python tests"),(0,i.kt)("p",null,"ReportPortal pytest agent has specific properties which control Launch UUID printing,\nsince version 5.2.0: ",(0,i.kt)("inlineCode",{parentName:"p"},"rp_launch_uuid_print")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"rp_launch_uuid_print_output"),".\nYou can put them into your ",(0,i.kt)("inlineCode",{parentName:"p"},"pytest.ini")," file. For this example, we just need\none of them: ",(0,i.kt)("inlineCode",{parentName:"p"},"rp_launch_uuid_print = True"),". It will output a line like this\ninto the console:\n",(0,i.kt)("inlineCode",{parentName:"p"},"Report Portal Launch UUID: 61ce1c26-842a-4bde-9abe-a4696e31d626"),"."),(0,i.kt)("p",null,"Next, we need to save this UUID to an environment variable which we later will\nuse in a separate stage in polling ReportPortal API. GitLab allows this with ",(0,i.kt)("a",{parentName:"p",href:"https://docs.gitlab.com/ee/ci/variables/#pass-an-environment-variable-to-another-job"},"dotenv\nfiles"),"."),(0,i.kt)("p",null,'Here is the updated "test" stage which does these things:'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"test:\n  stage: test\n  needs: ['secrets']\n  image: python:3.10.12\n  before_script:\n    - python -m pip install --upgrade pip\n    - pip install -rrequirements-dev.txt\n  script:\n    - pytest -sv --reportportal -m \"not command_skip\" -n 2 -o \"rp_api_key=$RP_DEMO_KEY\" tests | tee ./console.log\n    - >\n      sed -rn 's/Report Portal Launch UUID: ([^\\\\r\\\\n]+)/LAUNCH_UUID=\\1/ w launch.env' ./console.log\n")),(0,i.kt)("p",null,"Some explanations here:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"To preserve console output, we used the ",(0,i.kt)("inlineCode",{parentName:"li"},"tee")," command, which copies standard input to each specified file, and to standard output."),(0,i.kt)("li",{parentName:"ul"},"We used the ",(0,i.kt)("inlineCode",{parentName:"li"},"sed")," command to format and save our Launch UUID into ",(0,i.kt)("inlineCode",{parentName:"li"},"launch.env")," file."),(0,i.kt)("li",{parentName:"ul"},"Thus, we got a preformatted the ",(0,i.kt)("inlineCode",{parentName:"li"},"launch.env")," file and attached it as an artifact, which then will be used to populate environment variables by GitLab.")),(0,i.kt)("h3",{id:"adding-quality-gates-stage"},"Adding Quality Gates stage"),(0,i.kt)("p",null,'If you did your pipeline configuration in the same manner as in this article\nthis step will be the same for you, no matter which language do you use. First,\nwe need to configure our "test" stage not to fail in case of unsuccessful\ntests, since we are going to decide about test status on the Quality Gates step. This can be\ndone by adding the ',(0,i.kt)("inlineCode",{parentName:"p"},"allow_failure: true")," field:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"test:\n  stage: test\n  needs: ['secrets']\n  allow_failure: true\n")),(0,i.kt)("p",null,"As the next step we need to add the ",(0,i.kt)("inlineCode",{parentName:"p"},"quality-gate")," stage to our pipeline:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"stages:\n  - secrets\n  - test\n  - quality-gate\n\nquality-gate:\n  stage: quality-gate\n  needs: ['test']\n")),(0,i.kt)("p",null,"Notice that we put the ",(0,i.kt)("inlineCode",{parentName:"p"},"needs: ['test']")," property to run the Quality Gates job only after we pass\ntests."),(0,i.kt)("p",null,"The third step will be a little bit tricky. Since we don't specify any image, we\ndon't really know which base image is used in our GitLab instance. This might\nbe an Ubuntu/Debian based image, or Alpine Linux, or anything else, depending\non which workers were chosen by your operations team. But we need to ensure we\nhave ",(0,i.kt)("inlineCode",{parentName:"p"},"curl")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"jq")," tools to call ReportPortal API, so we need to install them in\nthe ",(0,i.kt)("inlineCode",{parentName:"p"},"before_script")," section. Let's make it universal for Debian and Alpine like\nthat:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"quality-gate:\n  stage: quality-gate\n  needs: ['test']\n  before_script:\n    - apt-get update || apk update\n    - apt-get install -y curl jq || apk add --no-cache curl jq\n")),(0,i.kt)("p",null,'As you can see, we used logical "or" sign ',(0,i.kt)("inlineCode",{parentName:"p"},"||")," to call ",(0,i.kt)("inlineCode",{parentName:"p"},"apk"),", which is Alpine\npackaging tool, in case ",(0,i.kt)("inlineCode",{parentName:"p"},"apt-get")," does not exist and therefore returns failure\nresult."),(0,i.kt)("p",null,"Now, it's time to finish our script, this will be a rather complex one:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'quality-gate:\n  stage: quality-gate\n  needs: [\'test\']\n  before_script:\n    - apt-get update || apk update\n    - apt-get install -y curl jq || apk add --no-cache curl jq\n  variables:\n    RP_INSTANCE: \'https://demo.reportportal.io\'\n    SCRIPT_TIMEOUT_SECONDS: 60\n    REQUEST_TIMEOUT_SECONDS: 60\n  script: |\n    echo "Quality gate"\n    echo "LAUNCH_UUID: $LAUNCH_UUID"\n    QUALITY_GATE_STATUS=""\n    START_TIME=$(date +%s)\n    while [ -z "$QUALITY_GATE_STATUS" ] && [ $(( $(date +%s) - START_TIME )) -lt $SCRIPT_TIMEOUT_SECONDS ]; do\n      echo "Waiting for quality gate status..."\n      sleep 10\n      QUALITY_GATE_JSON=$(curl -s -H "Authorization: Bearer $RP_DEMO_KEY" --max-time "$REQUEST_TIMEOUT_SECONDS" "${RP_INSTANCE}/api/v1/report_portal_demo/launch/${LAUNCH_UUID}")\n      QUALITY_GATE_STATUS=$(echo "$QUALITY_GATE_JSON" | jq -r \'.metadata.qualityGate.status // empty\')\n    done\n    if [ "$QUALITY_GATE_STATUS" != "PASSED" ]; then\n      echo "Quality gate status: $QUALITY_GATE_STATUS"\n      echo "Failing the pipeline."\n      exit 1\n    else\n      echo "Quality gate status: $QUALITY_GATE_STATUS"\n      echo "Pipeline passed."\n    fi\n')),(0,i.kt)("p",null,"Notice, that we have moved the ReportPortal base URL configuration, polling timeout and request timeout\nto the variables section to ease their update. In script we are polling our ReportPortal\ninstance for Launch info with ",(0,i.kt)("inlineCode",{parentName:"p"},"curl")," and Launch UUID, which we got in the previous\nstep. After that with ",(0,i.kt)("inlineCode",{parentName:"p"},"jq")," we are trying to read a specific field in response\nJSON or return empty value if Quality Gate is not passed yet, or request is failed. In\ncase of an empty response, we retry our call to ReportPortal. Finally, we compare ",(0,i.kt)("inlineCode",{parentName:"p"},"jq"),'\noutput with "PASSED" literal and if it\u2019s equal we quit gracefully, or we fail\nthe step in any other case.'),(0,i.kt)("p",null,"And we are finally done!"),(0,i.kt)("h2",{id:"conclusion"},"Conclusion"),(0,i.kt)("p",null,"ReportPortal does not have native integration with GitLab, but that\u2019s not something that\nmight stop you. In this article we set up GitLab integration with ReportPortal using\nshell scripts and console commands. We also implemented HashiCorp Vault\nintegration to store our test secrets securely. To provide more outlook we\ndescribed how to run tests in Kotlin and Python."),(0,i.kt)("p",null,"And here are the corresponding pipeline files, which we implemented:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/reportportal/examples-java/blob/master/.gitlab-ci.yml"},"Kotlin")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/reportportal/examples-python/blob/master/.gitlab-ci.yml"},"Python"))))}d.isMDXComponent=!0}}]);