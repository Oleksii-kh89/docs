"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[1006],{3905:(e,t,r)=>{r.d(t,{Zo:()=>d,kt:()=>m});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var l=n.createContext({}),p=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},d=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},g=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),c=p(r),g=o,m=c["".concat(l,".").concat(g)]||c[g]||u[g]||a;return r?n.createElement(m,s(s({ref:t},d),{},{components:r})):n.createElement(m,s({ref:t},d))}));function m(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,s=new Array(a);s[0]=g;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[c]="string"==typeof e?e:o,s[1]=i;for(var p=2;p<a;p++)s[p]=r[p];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}g.displayName="MDXCreateElement"},49656:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>p});var n=r(87462),o=(r(67294),r(3905));const a={sidebar_position:3,sidebar_label:"Rest Assured"},s="ReportPortal Rest Assured Integration",i={unversionedId:"log-data-in-reportportal/test-framework-integration/Java/Loggers/RestAssured",id:"log-data-in-reportportal/test-framework-integration/Java/Loggers/RestAssured",title:"ReportPortal Rest Assured Integration",description:"The logger intercept and logs all Requests and Responses issued by REST Assured into ReportPortal in Markdown format, including multipart",source:"@site/docs/log-data-in-reportportal/test-framework-integration/Java/Loggers/RestAssured.md",sourceDirName:"log-data-in-reportportal/test-framework-integration/Java/Loggers",slug:"/log-data-in-reportportal/test-framework-integration/Java/Loggers/RestAssured",permalink:"/docs/log-data-in-reportportal/test-framework-integration/Java/Loggers/RestAssured",draft:!1,editUrl:"https://github.com/reportportal/docs/blob/develop/docs/log-data-in-reportportal/test-framework-integration/Java/Loggers/RestAssured.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,sidebar_label:"Rest Assured"},sidebar:"defaultSidebar",previous:{title:"Log4J",permalink:"/docs/log-data-in-reportportal/test-framework-integration/Java/Loggers/Log4J"},next:{title:"Selenide",permalink:"/docs/log-data-in-reportportal/test-framework-integration/Java/Loggers/Selenide"}},l={},p=[],d={toc:p},c="wrapper";function u(e){let{components:t,...r}=e;return(0,o.kt)(c,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"reportportal-rest-assured-integration"},"ReportPortal Rest Assured Integration"),(0,o.kt)("p",null,"The logger intercept and logs all Requests and Responses issued by ",(0,o.kt)("a",{parentName:"p",href:"https://rest-assured.io/"},"REST Assured")," into ReportPortal in Markdown format, including multipart\nrequests. It recognizes payload types and attach them in corresponding manner: image types will be logged as images with thumbnails, binary\ntypes will be logged as entry attachments, text types will be formatted and logged in Markdown code blocks."),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/reportportal/logger-java-rest-assured#readme"},"Installation guide")))}u.isMDXComponent=!0}}]);