"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[5326],{3905:(t,e,n)=>{n.d(e,{Zo:()=>u,kt:()=>d});var r=n(67294);function o(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function i(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function a(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?i(Object(n),!0).forEach((function(e){o(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function s(t,e){if(null==t)return{};var n,r,o=function(t,e){if(null==t)return{};var n,r,o={},i=Object.keys(t);for(r=0;r<i.length;r++)n=i[r],e.indexOf(n)>=0||(o[n]=t[n]);return o}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(r=0;r<i.length;r++)n=i[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(o[n]=t[n])}return o}var l=r.createContext({}),c=function(t){var e=r.useContext(l),n=e;return t&&(n="function"==typeof t?t(e):a(a({},e),t)),n},u=function(t){var e=c(t.components);return r.createElement(l.Provider,{value:e},t.children)},p="mdxType",f={inlineCode:"code",wrapper:function(t){var e=t.children;return r.createElement(r.Fragment,{},e)}},g=r.forwardRef((function(t,e){var n=t.components,o=t.mdxType,i=t.originalType,l=t.parentName,u=s(t,["components","mdxType","originalType","parentName"]),p=c(n),g=o,d=p["".concat(l,".").concat(g)]||p[g]||f[g]||i;return n?r.createElement(d,a(a({ref:e},u),{},{components:n})):r.createElement(d,a({ref:e},u))}));function d(t,e){var n=arguments,o=e&&e.mdxType;if("string"==typeof t||o){var i=n.length,a=new Array(i);a[0]=g;var s={};for(var l in e)hasOwnProperty.call(e,l)&&(s[l]=e[l]);s.originalType=t,s[p]="string"==typeof t?t:o,a[1]=s;for(var c=2;c<i;c++)a[c]=n[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}g.displayName="MDXCreateElement"},3514:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>l,contentTitle:()=>a,default:()=>f,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var r=n(87462),o=(n(67294),n(3905));const i={sidebar_label:"Integration with CI/CD"},a="Integration with CI/CD",s={unversionedId:"quality-gates/IntegrationWithCICD/index",id:"quality-gates/IntegrationWithCICD/index",title:"Integration with CI/CD",description:"ReportPortal is a CI agnostic tool, it integrates on the test framework level, but to ease configuration we have auxiliary code in RP for some CI tools.",source:"@site/docs/quality-gates/IntegrationWithCICD/index.md",sourceDirName:"quality-gates/IntegrationWithCICD",slug:"/quality-gates/IntegrationWithCICD/",permalink:"/docs/quality-gates/IntegrationWithCICD/",draft:!1,editUrl:"https://github.com/reportportal/docs/blob/develop/docs/quality-gates/IntegrationWithCICD/index.md",tags:[],version:"current",frontMatter:{sidebar_label:"Integration with CI/CD"},sidebar:"defaultSidebar",previous:{title:"Assessment of test results using Quality Gates",permalink:"/docs/quality-gates/AssessmentOfTestResultsUsingQualityGates"},next:{title:"Integration with GitHub Actions",permalink:"/docs/quality-gates/IntegrationWithCICD/IntegrationWithGitHubActions"}},l={},c=[],u={toc:c},p="wrapper";function f(t){let{components:e,...n}=t;return(0,o.kt)(p,(0,r.Z)({},u,n,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"integration-with-cicd"},"Integration with CI/CD"),(0,o.kt)("p",null,"ReportPortal is a CI agnostic tool, it integrates on the test framework level, but to ease configuration we have auxiliary code in RP for some CI tools."))}f.isMDXComponent=!0}}]);